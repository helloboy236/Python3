<!--pages/first/chapters/c1/c1.wxml-->
<view class='show'>
<text>
Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。Python没有C那么繁琐的声明，当你需要用到某个变量的时候，只需要 
</text>
<view class='showFun'>
  <text>>>>a=1\r\n>>>mingzi = 'xiaoming'
  </text>
</view>
<text>
这样我们就声明并初始化了变量a和变量mingzi，仅此而已。

Python为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用Python开发，许多功能不必从零编写，直接使用现成的即可。

除了内置的库外，Python还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。

许多大型网站就是用Python开发的，例如YouTube、Instagram，还有国内的豆瓣。很多大公司，包括Google、Yahoo等，甚至NASA（美国航空航天局）都大量地使用Python。

龟叔给Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。

任何编程语言都有缺点，Python也不例外。优点说过了，那Python有哪些缺点呢？

第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。

但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。例如开发一个下载MP3的网络应用程序，C程序的运行时间需要0.001秒，而Python程序的运行时间需要0.1秒，慢了100倍，但由于网络更慢，需要等待1秒，你想，用户能感觉到1.001秒和1.1秒的区别吗？这就好比F1赛车和普通的出租车在北京三环路上行驶的道理一样，虽然F1赛车理论时速高达400公里，但由于三环路堵车的时速只有20公里，因此，作为乘客，你感觉的时速永远是20公里。

第二个缺点就是代码不能加密。如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。

这个缺点仅限于你要编写的软件需要卖给别人挣钱的时候。好消息是目前的互联网时代，靠卖软件授权的商业模式越来越少了，靠网站和移动应用卖服务的模式越来越多了，后一种模式不需要把源码给别人。

再说了，现在如火如荼的开源运动和互联网自由开放的精神是一致的，互联网上有无数非常优秀的像Linux一样的开源代码，我们千万不要高估自己写的代码真的有非常大的“商业价值”。那些大公司的代码不愿意开放的更重要的原因是代码写得太烂了，一旦开源，就没人敢用他们的产品了。

当然，Python还有其他若干小缺点，请自行忽略，就不一一列举了。

最后，我想说一下怎么学习Python,可能不一定正确，请读者选择性忽略

(1) 学习 Python 的基础语法（本小程序重点内容）
      学习的过程中要多加练习，尽可能地在电脑上操作，把能想到的可能情况一一尝试一遍，从而获得对该知识点的一个大致印象，学以致用，用得多了便就记住了。
(2) 多练习 Python 实战项目
      刚开始可以参考别人写的代码，并照着写一遍，达到预期的效果之后可以自己加以改进，学习他人的长处，弥补自己的不足，在Python中的库有很多，自己用的习惯就好，不必每个都涉及到。

学习一门语言，我认为最重要的就是多练习，所谓熟能生巧，一个知识点用的多了也就记住了。

后面章节我们将以Python3为例。

</text>
<button class='btnreturn' bindtap='returnMain'>返回主目录</button>
</view>
